#!/usr/bin/python3

"""
This script reads the resources.arsc files in the malicous_apk
and benign_apk folders and copies the modified file dates into a
JSON file for later analysis

The output data format is as follows:
{"features": ["1222000000_to_1222111111", ...],
 "apps": {"999eca2457729e371355aea5faa38e14.apk": {"vector": [0,0,0,1], "malicious": [0,1]}, ...}}
"""

import os
import json
import glob
import time

__author__='mkkeffeler'

def main():
    date_buckets = [] # list of strings naming each date range used in the dataset
    all_dates = [] #List of strings naming every date used in the dataset
    get_app_date_map = {} # mapping from android app names to lists of dates
    app_malicious_map = {} # mapping from android app names to 1 or 0 for malware or goodware
    root_dir = os.getcwd()
    for i, directory in enumerate(['benign_apk', 'malicious_apk']):
        os.chdir(directory)
        for filename in glob.glob('*.apk'):
            print('Processing ' + filename)
            try:
                os.chdir(filename[:-4])
                mtime = os.stat('resources.arsc')
            except FileNotFoundError:
                continue
            get_app_date_map[filename] = int(mtime.st_mtime)
            if(mtime.st_mtime not in all_dates):
                all_dates.append(int(mtime.st_mtime)) #Adding all dates to list
            app_name = filename
            # make a one-hot bit vector of length 2. 1st bit set if malicious, otherwise 2nd bit
            app_malicious_map[app_name] = [1,0] if i else [0,1]
            os.chdir(os.pardir)
        os.chdir(root_dir)
    all_dates.sort() #Sorting dates from oldest to newest
    secondsinmonth = 60 * 60 * 24 * 28
    # Android was released Sept. 23, 2008
    startdate = 1222000000
    enddate  = startdate + secondsinmonth
    while True:
        date_buckets.append(str(startdate)+"_to_"+str(enddate))
        # Apps can't have been made in the future
        if(enddate >= time.time()):
            break
        startdate = enddate
        enddate = startdate + secondsinmonth
    all_apps = {} # mapping combining app_date_map and app_malicious_map using bits
    for app_name in get_app_date_map:
        date_vector = []
        for bucket in date_buckets:     
            mtime = get_app_date_map[app_name]
            startdate = int(bucket.split("_to_")[0]) 
            enddate = int(bucket.split("_to_")[1])
            if (startdate <= mtime) and (mtime < enddate):
                date_vector.append(1)
            else:
                date_vector.append(0)
        all_apps[app_name] = {'vector': date_vector, 'malicious': app_malicious_map[app_name]}
    with open('app_date_vectors.json', 'w') as outfile:
        json.dump({'features': date_buckets, 'apps': all_apps}, outfile)
    print('Wrote data on ' + str(len(date_buckets)) + ' date buckets and ' + str(len(all_apps)) + ' apps to a file.')

if __name__=='__main__':
    main()
