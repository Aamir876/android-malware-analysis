#!/usr/bin/python3

"""
This script reads the AndroidManifest.xml files in the malicous_apk
and benign_apk folders and copies the requested permissions into a
JSON file for later analysis

The output data format is as follows:
{"permissions": ["android.permission.RECEIVE_BOOT_COMPLETED", ...],
 "apps": {"burrows.apps.rootchecker": {"vector": [0,0,0,1], "malicious": 0}, ...}}
"""

import os
from defusedxml import ElementTree
import json

__author__='mwleeds'

def main():
    all_permissions = [] # list of strings naming each permission used in the dataset
    app_permission_map = {} # mapping from android app names to lists of permissions
    app_malicious_map = {} # mapping from android app names to 1 or 0 for malware or goodware
    for i, directory in enumerate(['benign_apk', 'malicious_apk']):
        os.chdir(directory)
        valid_apks = []
        if os.path.isfile('valid_apks.txt'):
            with open('valid_apks.txt') as f:
                valid_apks = [line.strip() for line in f.readlines()]
        malformed_xml = []
        if os.path.isfile('malformed_xml.txt'):
            with open('malformed_xml.txt') as f:
                malformed_xml = [line.strip() for line in f.readlines()]
        for filename in valid_apks:
            if filename not in malformed_xml:
                os.chdir(filename[:-4])
                with open('AndroidManifest.xml') as xml_file:
                    et = ElementTree.parse(xml_file)
                    app_name = et.getroot().attrib['package']
                    app_malicious_map[app_name] = i
                    permissions = et.getroot().findall('./uses-permission')
                    app_permission_map[app_name] = []
                    for permission in permissions:
                        permission_name = permission.attrib['{http://schemas.android.com/apk/res/android}name']
                        if permission_name not in all_permissions: all_permissions.append(permission_name)
                        app_permission_map[app_name].append(permission_name)
                os.chdir(os.pardir)
        os.chdir(os.pardir)
    all_apps = {} # mapping combining app_permission_map and app_malicious_map using bits
    for app_name in app_permission_map:
        bit_vector = [1 if p in app_permission_map[app_name] else 0 for p in all_permissions]
        all_apps[app_name] = {'vector': bit_vector, 'malicious': app_malicious_map[app_name]}
    with open('app_permission_vectors.json', 'w') as outfile:
        json.dump({'permissions': all_permissions, 'apps': all_apps}, outfile)

if __name__=='__main__':
    main()
