#!/usr/bin/python3

"""
This script reads app_permission_vectors.json (written by parse_xml.py) and
feeds the data into a tensorflow "neural network" to try to learn from it.
"""

import tensorflow as tf
import numpy as np
import json

__author__='mwleeds'

def main():
    # load the data from a file
    with open('app_permission_vectors.json') as infile:
        training_data = json.load(infile)

    #TODO split training from test, convert to tf datatype

    # placeholder for any number of bit vectors
    x = tf.placeholder(tf.float32, [None, len(training_data['permissions'])])

    # weights for each synapse
    W = tf.Variable(tf.zeroes([len(training_data['permissions'])))

    # results
    y = tf.nn.softmax(tf.matmul(x, W))

    # placeholder for correct answers
    y_ = tf.placeholder(tf.float32, [None, 10])

    cross_entropy = -tf.reduce_sum(y_*tf.log(y))

    train_step = tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)

    init = tf.initialize_all_variables()

    sess = tf.Session()

    sess.run(init)

    for i in range(1000):
        #TODO fix to use my dataset
        batch_xs, batch_ys = mnist.train.next_batch(100)
        sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})

    correct_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))

    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))

    print(sess.run(accuracy, feed_dict={x: mnist.test.images, y_: mnist.test.labels}))


if __name__=='__main__':
    main()
