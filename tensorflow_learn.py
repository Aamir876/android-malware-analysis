#!/usr/bin/python3

"""
This script reads app_permission_vectors.json (written by parse_xml.py) and
feeds the data into a tensorflow "neural network" to try to learn from it.
"""

import tensorflow as tf
import numpy as np
import json
import math

__author__='mwleeds'

def main():
    # load the data from a file
    with open('app_permission_vectors.json') as infile:
        dataset = json.load(infile)

    # placeholder for any number of bit vectors
    x = tf.placeholder(tf.float32, [None, len(dataset['permissions'])])

    # weights for each synapse
    W = tf.Variable(tf.zeros([len(dataset['permissions']),1]))

    # results
    y = tf.nn.softmax(tf.matmul(x, W))

    # placeholder for correct answers
    y_ = tf.placeholder(tf.float32, [None, 1])

    cross_entropy = -tf.reduce_sum(y_*tf.log(y))

    train_step = tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)

    init = tf.initialize_all_variables()

    sess = tf.Session()

    sess.run(init)

    app_names = list(dataset['apps'])
    app_name_chunks = list(chunks(app_names, math.floor(len(app_names) / 10)))
    for i in range(9):
        batch_xs = [dataset['apps'][app]['vector'] for app in app_name_chunks[i]]
        batch_ys = [[dataset['apps'][app]['malicious']] for app in app_name_chunks[i]]
        sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})

    correct_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))

    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))

    test_xs = [dataset['apps'][app]['vector'] for app in app_name_chunks[9]]
    test_ys = [[dataset['apps'][app]['malicious']] for app in app_name_chunks[9]]
    print(sess.run(accuracy, feed_dict={x: test_xs, y_: test_ys}))

def chunks(l, n):
    """Yield successive n-sized chunks from l."""
    for i in range(0, len(l), n):
        yield l[i:i+n]

if __name__=='__main__':
    main()
